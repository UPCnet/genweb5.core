# Nombre del workflow que se mostrará en la UI de GitHub

name: Buildout and QA

# Especificamos que queremos que se ejecute cada push 
on:
  push:
    branches:
      - cicd
#      - master


# Aquí especificamos la lista de tareas que tiene que hacer en este workflow
jobs:
  # Empezamos con la tarea buildout que monatará el paquete para usarlo en los tests
  buildout:
    # Especificamos en que runner se ejecutará 
    # En este caso una máquina ubuntu en alguno de los servidores de GitHub
    runs-on: ubuntu-22.04

    # Estos son los pasos que tiene que seguir la terea para completarse
    steps:
      # Le decimos al runner que tiene que hacer un checkout de la rama 
      # para acceder a los ficheros y poder hacer el buildout
      - name: Checkout repo
        uses: actions/checkout@v3
      
      - name: Preapre python environment
        uses: ./.github/actions/setup_python_environment
      
      - name: Cache buildout
        id: cache-buildout
        uses: actions/cache@v3
        with:
          key:
            ${{ runner.os }}-build-${{ hashFiles('buildout.cfg', 'test_plone60.cfg', 'base.cfg', 'versions.cfg') }}
          path: |
            ./eggs
            ./bin
            ./parts
            ./src/genweb6.theme
      
      - name: Install system libraries # needed for compiling eggs
        run: |
          sudo apt-get install -y build-essential xsltproc libncurses5-dev zip libffi-dev libjpeg-dev libtk-img-dev libopenjp2-7-dev liblcms2-dev libfreetype6-dev libwebp-dev libtiff-dev zlib1g-dev libreadline-dev libsqlite3-dev libssl-dev libxslt1-dev libbz2-dev libldap2-dev libsasl2-dev libpcre3-dev wv poppler-utils
        shell: bash
        # No need if buildout is cached
        if: ${{ steps.cache-buildout.outputs.cache-hit != 'true' }}

      - name: Run buildout
        run: |
          source venv/bin/activate
          which pip
          pip freeze
          buildout -N -c buildout.cfg
        if: ${{ steps.cache-buildout.outputs.cache-hit != 'true' }}

  test:
    needs: buildout
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
        
      - name: Preapare python environment
        uses: ./.github/actions/setup_python_environment
      
      - name: Restore cache buildout
        id: cache-buildout-restore
        uses: actions/cache/restore@v3
        with:
          key:
            ${{ runner.os }}-build-${{ hashFiles('buildout.cfg', 'test_plone60.cfg', 'base.cfg', 'versions.cfg') }}
          path: |
            ./eggs
            ./bin
            ./parts
            ./src/genweb6.theme

      - name: Run tests
        run: |
          source venv/bin/activate
          tox -e py311-test
        if: ${{ steps.cache-buildout-restore.outputs.cache-hit == 'true' }}
  
  lint:
    needs: buildout
    runs-on: ubuntu-22.04
    outputs:
      lint_warn: ${{ steps.lint.outputs.warn }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
        
      - name: Preapare python environment
        uses: ./.github/actions/setup_python_environment
      
      - name: Restore cache buildout
        id: cache-buildout-restore
        uses: actions/cache/restore@v3
        with:
          key:
            ${{ runner.os }}-build-${{ hashFiles('buildout.cfg', 'test_plone60.cfg', 'base.cfg', 'versions.cfg') }}
          path: |
            ./eggs
            ./bin
            ./parts

      - name: Run linter
        id: lint
        run: |
          source venv/bin/activate
          warn="false"
          tox -e py311-lint || warn="true"
          echo "warn=$warn" >> "$GITHUB_OUTPUT"
        if: ${{ steps.cache-buildout-restore.outputs.cache-hit == 'true' }}
      
      - name: Create warning annotation
        run: echo "::warning title=Linter Warning::Your code has not passed the linter stage. Please check out the lint-report artifact"
        if: ${{ steps.lint.outputs.warn == 'true' }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: linter-report
          path: reports/flake8
        if: always()
  
  coverage:
    needs: test
    runs-on: ubuntu-22.04
    outputs:
      coverage_warn: ${{ steps.report.outputs.warn }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
        
      - name: Preapare python environment
        uses: ./.github/actions/setup_python_environment

      - name: Restore cache buildout
        id: cache-buildout-restore
        uses: actions/cache/restore@v3
        with:
          key:
            ${{ runner.os }}-build-${{ hashFiles('buildout.cfg', 'test_plone60.cfg', 'base.cfg', 'versions.cfg') }}
          path: |
            ./eggs
            ./bin
            ./parts
            ./src/genweb6.theme

      - name: Run coverage report
        id: report
        run: |
          source venv/bin/activate
          bin/coverage run bin/test
          bin/coverage html -i
          warn="false"
          bin/coverage report --fail-under=75 || warn="true"
          if [[ $warn == "true" ]]; then
            bin/coverage report --fail-under=30
          fi
          echo "warn=$warn" >> "$GITHUB_OUTPUT"
        if: ${{ steps.cache-buildout-restore.outputs.cache-hit == 'true' }}

      - name: Create error annotation
        run: echo "::error title=Coverage Error::Your code has less that 30% coverage"
        if: failure()

      - name: Create warning annotation
        run: echo "::warning title=Coverage Warning::Your code has less than 75% coverage"
        if: ${{ steps.report.outcome == 'success' && steps.report.outputs.warn == 'true' }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: htmlcov
        if: always()